// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exercises.sql

package pg_database

import (
	"context"
)

const createExercise = `-- name: CreateExercise :one
insert into
gowebapp.exercises (Exercise_Name)
values ($1) returning Exercise_ID
`

// insert a new exercise
func (q *Queries) CreateExercise(ctx context.Context, exerciseName string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createExercise, exerciseName)
	var exercise_id int64
	err := row.Scan(&exercise_id)
	return exercise_id, err
}

const deleteExercise = `-- name: DeleteExercise :exec
delete 
from gowebapp.exercises as e
WHERE e.exercise_id = $1
`

// delete a particular exercise
func (q *Queries) DeleteExercise(ctx context.Context, exerciseID int64) error {
	_, err := q.db.ExecContext(ctx, deleteExercise, exerciseID)
	return err
}

const upsertExercise = `-- name: UpsertExercise :one
insert into
gowebapp.exercises (Exercise_Name)
values ($1) on conflict (Exercise_ID) do
update
set Exercise_Name = Excluded.Exercise_Name
returning Exercise_ID
`

// insert or update exercise of a particular id
func (q *Queries) UpsertExercise(ctx context.Context, exerciseName string) (int64, error) {
	row := q.db.QueryRowContext(ctx, upsertExercise, exerciseName)
	var exercise_id int64
	err := row.Scan(&exercise_id)
	return exercise_id, err
}
