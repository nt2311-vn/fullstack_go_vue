// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workouts.sql

package pg_database

import (
	"context"
	"time"
)

const createWorkout = `-- name: CreateWorkout :one
insert into gowebapp.workouts
(User_ID, Set_ID, Start_Date)
values ($1, $2, $3)
returning workout_id, set_id, user_id, exercise_id, start_date
`

type CreateWorkoutParams struct {
	UserID    int64
	SetID     int64
	StartDate time.Time
}

// insert new workouts
func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (GowebappWorkout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout, arg.UserID, arg.SetID, arg.StartDate)
	var i GowebappWorkout
	err := row.Scan(
		&i.WorkoutID,
		&i.SetID,
		&i.UserID,
		&i.ExerciseID,
		&i.StartDate,
	)
	return i, err
}

const upsertWorkout = `-- name: UpsertWorkout :one
insert into gowebapp.workouts
(User_ID, Set_ID, Start_Date)
values ($1, $2, $3)
on conflict (Workout_ID) do
update set
User_ID = excluded.User_ID,
Set_ID = excluded.Set_ID,
Start_Date = excluded.Start_Date
returning Workout_ID
`

type UpsertWorkoutParams struct {
	UserID    int64
	SetID     int64
	StartDate time.Time
}

// insert or update a workout based on id
func (q *Queries) UpsertWorkout(ctx context.Context, arg UpsertWorkoutParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, upsertWorkout, arg.UserID, arg.SetID, arg.StartDate)
	var workout_id int64
	err := row.Scan(&workout_id)
	return workout_id, err
}
